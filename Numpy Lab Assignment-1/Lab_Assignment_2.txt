#  Suppose you have a dataset containing daily temperature readings for a city, and you
# want to identify days with extreme temperature conditions. Find days where the
# temperature either exceeded 35 degrees Celsius (hot day) or dropped below 5 degrees
# Celsius (cold day).

import numpy as np

temperatures = np.array([32.5, 34.2, 36.8, 29.3, 31.0, 38.7, 23.1, 18.5, 22.8, 37.2, 4.5, 3.4, 2.5])

hot_days = temperatures > 35
cold_days = temperatures < 5


hot_day_indices = np.where(hot_days)[0] + 1 
cold_day_indices = np.where(cold_days)[0] + 1  

hot_temperatures = temperatures[hot_days]
cold_temperatures = temperatures[cold_days]

print("Hot Days:")
print("Day       " , "Temperature (°C)")
for i in range(len(hot_day_indices)):
    print(hot_day_indices[i],"        ",hot_temperatures[i])

print("\nCold Days:")
print("Day       " , "Temperature (°C)")
for i in range(len(cold_day_indices)):
    print(cold_day_indices[i],"        ",cold_temperatures[i])

------------------------

Output: 
Hot Days:
Day        Temperature (°C)
3          36.8
6          38.7
10          37.2

Cold Days:
Day        Temperature (°C)
11          4.5
12          3.4
13          2.5


---------------------------------------------------------------------------------------------------------------------------------------

# Suppose you have a dataset containing monthly sales data for a company, and you
# want to split this data into quarterly reports for analysis and reporting purposes.

import numpy as np
monthly_sales = np.array([120, 135, 148, 165, 180, 155, 168, 190, 205, 198, 210, 225])

quarterly_sales = monthly_sales.reshape(-1, 3)

print("Quarter 1 Sales (in thousands of dollars):",quarterly_sales[0])
print("Quarter 2 Sales (in thousands of dollars):",quarterly_sales[1])
print("Quarter 3 Sales (in thousands of dollars):",quarterly_sales[2])
print("Quarter 4 Sales (in thousands of dollars):",quarterly_sales[3])

--------------------------

output :
Quarter 1 Sales (in thousands of dollars): [120 135 148]
Quarter 2 Sales (in thousands of dollars): [165 180 155]
Quarter 3 Sales (in thousands of dollars): [168 190 205]
Quarter 4 Sales (in thousands of dollars): [198 210 225]

--------------------------------------------------------------------------------------------------------------------------------------------------

# Suppose you have a dataset containing customer data, and you want to split this data
# into two groups: one group for customers who made a purchase in the last 30 days and
# another group for customers who haven't made a purchase in the last 30 days.

import numpy as np

customer_ids = np.array([101, 102, 103, 104, 105, 106, 107, 108, 109, 110])
last_purchase_days_ago = np.array([5, 15, 20, 25, 30, 35, 40, 45, 50, 55])

purchased_last_30_days_mask = last_purchase_days_ago <= 30
not_purchased_last_30_days_mask = last_purchase_days_ago > 30

purchased_last_30_days = customer_ids[purchased_last_30_days_mask]
not_purchased_last_30_days = customer_ids[not_purchased_last_30_days_mask]

print("Active Customers (Last Purchase <= 30 days ago):", purchased_last_30_days)
print("Inactive Customers (Last Purchase > 30 days ago):", not_purchased_last_30_days)

---------------------------

output :
Active Customers (Last Purchase <= 30 days ago): [101 102 103 104 105]
Inactive Customers (Last Purchase > 30 days ago): [106 107 108 109 110]

---------------------------------------------------------------------------------------------------------------------------------------------------------------

# Suppose you have two sets of employee data—one containing information about
# full-time employees and another containing information about part-time employees. You
# want to combine this data to create a comprehensive employee dataset for HR analysis.
# Employee data for full-time employees.

import numpy as np

# Employee data for full-time employees
full_time_employees = np.array([
[101, 'John Doe', 'Full-Time', 55000],
[102, 'Jane Smith', 'Full-Time', 60000],
[103, 'Mike Johnson', 'Full-Time', 52000]
])
# Employee data for part-time employees
part_time_employees = np.array([
[201, 'Alice Brown', 'Part-Time', 25000],
[202, 'Bob Wilson', 'Part-Time', 28000],
[203, 'Emily Davis', 'Part-Time', 22000]
])

result = np.concatenate((full_time_employees,part_time_employees), axis=0)

print("Combined Employee Data:\n")

for employee in result:
    print(f"Employee ID: {employee[0]}, Name: {employee[1]}, Type: {employee[2]}, Salary: {employee[3]}\n")

------------------------------

Output:
Combined Employee Data:

Employee ID: 101, Name: John Doe, Type: Full-Time, Salary: 55000

Employee ID: 102, Name: Jane Smith, Type: Full-Time, Salary: 60000

Employee ID: 103, Name: Mike Johnson, Type: Full-Time, Salary: 52000

Employee ID: 201, Name: Alice Brown, Type: Part-Time, Salary: 25000

Employee ID: 202, Name: Bob Wilson, Type: Part-Time, Salary: 28000

Employee ID: 203, Name: Emily Davis, Type: Part-Time, Salary: 22000

-------------------------------------------------------------------------------------------------------------------------------------------------------------

# # 1.How to find the mean of every NumPy array in the given list?

import numpy as np

list = [
np.array([3, 2, 8, 9]),
np.array([4, 12, 34, 25, 78]),
np.array([23, 12, 67])
]
print("mean of each array :")
for i in list:
    mean = np.mean(i)
  
    print( mean,end=" ")

-----------------------------

Output :
mean of each array :
5.5 30.6 34.0 

--------------------------------------------------------------------------------------------------------------------------------------------------------

# 2.Compute the median of the flattened NumPy array

import numpy as np
x_odd = np.array([1, 2, 3, 4, 5, 6, 7])

print("Printing the Original array :",x_odd)

median = np.median(x_odd)
print("Median of the array that contains odd no of element :",median)

------------------------------

Output:
Printing the Original array : [1 2 3 4 5 6 7]
Median of the array that contains odd no of element : 4.0

---------------------------------------------------------------------------------------------------------------------------------------------------------------

# 3.Compute the standard deviation of the NumPy array.

import numpy as np

arr1 = [20, 2, 7, 1, 34]
print("arr :",arr1)

std = np.std(arr1)
print("std of arr :",std)

arr = np.array(arr1 , dtype = np.float32)
std = np.std(arr)
print("More precision with float32")
print("std of arr :",std)

arr = np.array(arr1 , dtype = np.float64)
std = np.std(arr)
print("More precision with float64")
print("std of arr :",std)

------------------------------

Output:
arr : [20, 2, 7, 1, 34]
std of arr : 12.576167937809991
More precision with float32
std of arr : 12.576168
More precision with float64
std of arr : 12.576167937809991

-------------------------------------------------------------------------------------------------------------------------------------------------------

# 4.Suppose you have a CSV file named 'house_prices.csv' with price information, and
# you want to perform the following operations:
# ● 1.Read the data from the CSV file into a NumPy array.
# ● 2.Calculate the average of house prices.
# ● 3.Identify house price above the average.
# ● 4.Save the list of high prices to a new CSV file.

import numpy as np

house_prices = np.genfromtxt('house_prices.csv', delimiter=',', skip_header=1, usecols=0)


average_price = np.mean(house_prices)
print(f"Average House Price: {average_price}")

high_prices = house_prices[house_prices > average_price]
print(high_prices)
np.savetxt('high_house_prices.csv', high_prices, delimiter=',', header='price',fmt='%.2f')

----------------------------

Output:
Average House Price: 513932.17
[771155. 744167. 832180. 621430. 999159. 887201. 818315. 876997. 891743.
 521909. 586232. 600186. 970910. 754811. 627035. 748143. 552366. 691723.
 655839. 628178. 665894. 589492. 573254. 765987. 798361. 831912. 517113.
 877089. 748531. 778843. 672843. 903591. 996942. 704365. 922352. 560337.
 824839. 905889. 559773. 864469. 538974. 661353. 723587. 635822. 587879.
 664685. 882038.]


 
    
 